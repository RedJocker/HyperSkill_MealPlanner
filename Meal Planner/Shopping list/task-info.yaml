type: edu
files:
- name: src/mealplanner/Main.kt
  visible: true
  text: |-
    package mealplanner

    import mealplanner.Database
    import com.squareup.sqldelight.db.SqlDriver
    import com.squareup.sqldelight.sqlite.driver.JdbcSqliteDriver

    fun main() {
        //mealplanner.UI.start()
        val driver: SqlDriver = JdbcSqliteDriver(JdbcSqliteDriver.IN_MEMORY)
        Database.Schema.create(driver)





    }
  learner_created: false
- name: src/mealplanner/Meal.kt
  visible: true
  text: |+
    package mealplanner

    class Meal(private val category: Category, private val name: String, private val ingredients: List<String>) {


        override fun toString(): String {

            return "Category: $category\n" +
                    "Name: $name\n" +
                    ingredients.joinToString(
                            "\n", "Ingredients: \n"
                    )
        }


        enum class Category(val category: String) {
            BREAKFAST("breakfast"), LUNCH("lunch"), DINNER("dinner");


            override fun toString(): String {
                return category
            }

            companion object {
                val categoriesString: String = Category.values()
                        .map(Category::category)
                        .joinToString(", ")

                fun fromName(name: String): Category? {
                    return values().firstOrNull { it.category == name }
                }
            }
        }

        object Validator {
            fun validateWord(word: String): Boolean {
                return word.all { char -> char.isLetter() || char == ' ' }
            }
        }
    }

  learner_created: false
- name: src/mealplanner/Menu.kt
  visible: true
  text: |+
    package mealplanner

    object Menu {

            private val meals: MutableList<Meal> = mutableListOf()

            fun addMealFromInput(){
                meals.add(UI.addMealFromInput())
            }

            fun printMenu() {
                UI.printMenu(meals)
            }
        }


  learner_created: false
- name: src/mealplanner/UI.kt
  visible: true
  text: |-
    package mealplanner

    object UI {

        private val commandMenuString = "What would you like to do (${Command.commandsString})?"
        private val addMenuString = "Which meal do you want to add (${Meal.Category.categoriesString})?"
        private val invalidCategory = "Wrong meal category! Choose from: ${Meal.Category.categoriesString}."
        private const val invalidFormat = "Wrong format. Use letters only!"
        private const val queryMealsName = "mealplanner.Meal's name:"
        private const val queryIngredients = "Ingredients:"
        private const val addSucceeded = "mealplanner.Meal added!"
        private const val noMealsSaved = "No meals saved. Add meal first."
        private const val invalidCommand = "Invalid command, try again"
        private const val bye = "Bye!"
        private const val invalidStringDefault = "1"


        fun start() {
            while(true) {
                Command.NEXT.execute()
            }
        }

        fun addMealFromInput(): Meal {
            println(addMenuString)
            val category = queryMealCategory()

            println(queryMealsName)
            val name = queryMealName()

            println(queryIngredients)
            val ingredients = queryMealIngredients()

            println(addSucceeded)
            return Meal(category, name, ingredients)
        }

        private fun queryMealCategory(): Meal.Category {
            //println(addMenuString)
            val category = Meal.Category.fromName(
                    readLine() ?: invalidStringDefault
            )

            if(category == null) {
                println(invalidCategory)
                return queryMealCategory()
            }
            return category
        }

        private fun queryMealName(): String {
            //println(queryMealsName)
            val name = readLine() ?: invalidStringDefault
            if(!Meal.Validator.validateWord(name)) {
                println(invalidFormat)
                return queryMealName()
            }
            return name
        }

        private fun queryMealIngredients(): List<String> {
            //println(queryIngredients)
            val ingredients:List<String> = (readLine() ?: invalidStringDefault).split(", ")
                    .map(String::trim)
                    .toList()
            if(ingredients.any { ingredient -> !Meal.Validator.validateWord(ingredient) }) {
                println(invalidFormat)
                return queryMealIngredients()

            }
            return ingredients
        }

        fun printMenu(meals: List<Meal>) {
            meals.apply{
                if(isEmpty()) {
                    println(noMealsSaved)
                } else {
                    meals.forEach(::println)
                }
            }
        }

        fun nextCommand() {
            println(commandMenuString)
            val commandStr = readLine() ?: invalidStringDefault
            Command.fromName(commandStr).execute()

        }

        fun tryAgain() {
            println(invalidCommand)

        }

        enum class Command(private val runnable: Runnable) {
            ADD(Menu::addMealFromInput), SHOW(Menu::printMenu),
            NEXT(UI::nextCommand), TRY_AGAIN(UI::tryAgain),
            EXIT( {  -> println(bye); kotlin.system.exitProcess(0) } );


            fun execute()   {
                runnable.run()
            }

            companion object {

                val commandsString = values()
                        .filter { it !in listOf(TRY_AGAIN, NEXT)}
                        //.filter { it != TRY_AGAIN && it != NEXT}
                        .joinToString(", ") { it.name.toLowerCase() }

                fun fromName(name: String): Command {
                    return Command.values().firstOrNull(){ it.name.equals(name, ignoreCase = true)} ?: TRY_AGAIN
                }
            }
        }
    }
  learner_created: false
- name: test/KotlinTest.java
  visible: false
  text: |-
    import org.hyperskill.hstest.stage.StageTest;

    public abstract class KotlinTest<T> extends StageTest<T> {

    }
  learner_created: false
- name: test/MealPlannerTestS6.kt
  visible: false
  text: |-
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod
    import org.hyperskill.hstest.testcase.CheckResult
    import org.hyperskill.hstest.testing.TestedProgram
    import java.io.File

    class MealPlannerTestS6() : KotlinTest<String>() {

        private val dbName = "test.db"

        @DynamicTestingMethod
        open fun test(): CheckResult? {
            val main = TestedProgram()

            main.start(dbName)
            main.execute("show")
            val output = main.execute("lunch")


            if (output != "No meals found.\n" +
                    "What would you like to do (add, show, plan, save, exit)?\n") {
                return CheckResult.wrong("Wrong answer on  \"show\" command.")
            }
            return CheckResult.correct()
        }

        @DynamicTestingMethod
        open fun test2(): CheckResult? {
            val main = TestedProgram()

            main.start(dbName)
            main.execute("save")
            val output = main.execute("testFile.txt")


            if (output != "Save isn't allowed. Plan your meals first.\n" +
                    "What would you like to do (add, show, plan, save, exit)?\n") {
                return CheckResult.wrong("Wrong answer on  \"save\" command.")
            }
            return CheckResult.correct()
        }

        @DynamicTestingMethod
        open fun test3(): CheckResult? {
            val main = TestedProgram()

            main.start(dbName)
            main.execute("add")
            main.execute("breakfast")
            main.execute("cat")
            main.execute("bread, peanut butter, jelly")

            main.execute("add")
            main.execute("breakfast")
            main.execute("ara")
            main.execute("tomato, cheese, bread")

            main.execute("add")
            main.execute("breakfast")
            main.execute("zebra")
            main.execute("muesli, milk, nuts")

            main.execute("add")
            main.execute("lunch")
            main.execute("dog")
            main.execute("ketchup, sausage")

            main.execute("add")
            main.execute("lunch")
            main.execute("mouse")
            main.execute("fish, potato")

            main.execute("add")
            main.execute("dinner")
            main.execute("lion")
            main.execute("carmel, nuts, cream")

            val output = main.execute("plan").split("\n")
            if (output[1] != "ara" && output[2] != "cat" && output[3] != "zebra") {
                return CheckResult.wrong("List of meals not sorted.")
            }

            main.execute("ara")
            main.execute("dog")
            val output2 = main.execute("lion").toLowerCase()
            if (!output2.contains("yeah! we planned the meals for monday.\n")) {
                return CheckResult.wrong("Wrong answer on \"plan\" command.")
            }

            val output3 = main.execute("parrot")
            if (output3 != "This meal doesnâ€™t exist. Choose a meal from the list above.\n") {
                return CheckResult.wrong("Wrong answer on \"plan\" command.")
            }
            repeat(5) {
                main.execute("zebra")
                main.execute("mouse")
                main.execute("lion")
            }
            main.execute("zebra")
            main.execute("mouse")
            val output4 = main.execute("lion").split("\n").filterNot { it.isEmpty() }

            if (output[0].toLowerCase() != "yeah! we planned the meals for sunday." &&
                    output4[1].toLowerCase() != "monday" && output4[2].toLowerCase() != "breakfast: ara"
                    && output4[3].toLowerCase() != "lunch: dog" && output4[4].toLowerCase() != "dinner: lion") {
                return CheckResult.wrong("Wrong answer on \"plan\" command.")
            }

            main.execute("save")
            val filename = "testFile.txt"
            val output5 = main.execute(filename)

            if (!output5.contains("Saved correctly!")) {
                return CheckResult.wrong("Wrong answer on \"save\" command.")
            }
            val userFile = File(filename)
            val shoppingList =  userFile.readText().split("\n")

            if (!shoppingList.contains("muesli x6")) {
                return CheckResult.wrong("Wrong shopping list format.")
            }

            if (!shoppingList.contains("tomato")) {
                return CheckResult.wrong("Wrong shopping list format.")
            }

            main.execute("exit")
            main.stop()

            val file = File(dbName)
            file.delete()

            userFile.delete()

            return CheckResult.corrct()
        }
    }
  learner_created: false
- name: src/mealplanner/database/DbService.kt
  visible: true
  text: |-
    package mealplanner.database

    import com.squareup.sqldelight.db.SqlDriver
    import com.squareup.sqldelight.sqlite.driver.JdbcSqliteDriver
    import mealdb.data.IngredientsDaoQueries
    import mealdb.data.MealDao
    import mealdb.data.MealDaoQueries
    import mealplanner.Database
    import mealplanner.Meal
    import mealplanner.Menu


    class DbService private constructor(private val databaseName: String) {

        private val driver: SqlDriver = JdbcSqliteDriver("jdbc:sqlite:$databaseName")

        init {
            Database.Schema.create(driver)
        }

        private val database = Database(driver)
        private val mealDaoQueries: MealDaoQueries = database.mealDaoQueries
        private val ingredientsDaoQueries: IngredientsDaoQueries = database.ingredientsDaoQueries


        fun insertIngredient(ingredient: String, meal: Meal) {

            val mealDao = mealDaoQueries.findMealDao(meal.name, meal.category.type)
                    .executeAsOneOrNull()
            mealDao?.also { dao ->
                ingredientsDaoQueries.insert(ingredient, dao.meal_id)
            }
        }

        fun insertIngredient(ingredient: String, mealDao: MealDao) {
            ingredientsDaoQueries.insert(ingredient, mealDao.meal_id)
        }

        fun insertMeal(meal: Meal) {
            val foundMealDao = mealDaoQueries.findMealDao(meal.name, meal.category.type)
                    .executeAsOneOrNull()

            if (foundMealDao == null) {
                mealDaoQueries.insert(meal.category.type, meal.name)
                val createdMealDao = mealDaoQueries.findMealDao(meal.name, meal.category.type)
                        .executeAsOne()
                meal.ingredients.forEach { ingred ->
                    insertIngredient(ingred, createdMealDao)
                }
            } else {
                meal.ingredients.forEach { ingred ->
                    insertIngredient(ingred, foundMealDao)
                }
            }
        }

        fun initMenu() {
            val listMealDao = mealDaoQueries.selectAll().executeAsList()
            listMealDao.forEach { mealDao ->
                val ingredientsList =
                        ingredientsDaoQueries.allIngredientsWithMealId(mealDao.meal_id)
                                .executeAsList()
                                .map { ingredientsDao -> ingredientsDao.ingredient }

                val category = Meal.Category.fromName(mealDao.category)
                        ?: throw error("initMenu error, invalid meal category stored on database")

                val meal = Meal(category, mealDao.meal, ingredientsList)

                Menu.addMeal(meal);
            }

        }

        fun close() {
            driver.close()
        }

        companion object {
            var singletonInstance:  DbService? = null;


            fun getDbServiceInstance(dbName: String): DbService {
                if (singletonInstance == null) {
                    singletonInstance  =  DbService(dbName)
                    return singletonInstance as DbService
                }

                return singletonInstance as DbService
            }
        }
    }
  learner_created: true
- name: src/main/sqldelight/mealdb/data/MealDao.sq
  visible: true
  text: |+
    selectAll:
    SELECT *
    FROM mealDao;

    insert:
    INSERT INTO mealDao(category, meal)
    VALUES (?, ?);

    findIdByName:
    SELECT meal_id FROM mealDao
    WHERE meal = (?);

    findMealDao:
    SELECT * FROM mealDao
    WHERE meal = (?) AND category = (?);





    -- CREATE TABLE mealDao (
    --   meal_id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    --   category TEXT NOT NULL,
    --   meal TEXT NOT NULL
    -- );



  learner_created: true
- name: src/main/sqldelight/mealdb/data/IngredientsDao.sq
  visible: true
  text: |-
    selectAll:
    SELECT *
    FROM ingredientsDao;

    insert:
    INSERT INTO ingredientsDao(ingredient, meal_id)
    VALUES (?, ?);

    allIngredientsWithMealId:
    SELECT *
    FROM ingredientsDao
    WHERE meal_id = (?);
  learner_created: true
- name: src/mealplanner/planner/WeekDay.kt
  visible: true
  text: |-
    package mealplanner.planner

    enum class WeekDay {
        MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY;

        override fun toString(): String {
            return this.name.toLowerCase().capitalize()
        }


    }
  learner_created: true
- name: src/mealplanner/planner/WeekMealPlan.kt
  visible: true
  text: |-
    package mealplanner.planner


    import mealplanner.Meal


    class WeekMealPlan( val weekPlanMap: Map<WeekDay, Map<Meal.Category, Meal>>) {

        override fun toString(): String {
            return weekPlanMap.mapTo(mutableListOf<String>(), { (weekday, daysMeals) ->
                val daysMealsString = daysMeals.mapTo(mutableListOf<String>(), { (category, meal) ->
                    "${category.type.capitalize()}: ${meal.name.toLowerCase()}"
                }).joinToString("\n",  )

                "${weekday.toString().toLowerCase().capitalize()}\n$daysMealsString\n"

            }).joinToString("\n" ,)

        }
    }
  learner_created: true
- name: src/main/sqldelight/mealdb/data/CreateTables.sq
  visible: true
  text: |+
    CREATE TABLE IF NOT EXISTS mealDao (
      meal_id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
      category TEXT NOT NULL,
      meal TEXT NOT NULL
    );


    CREATE TABLE IF NOT EXISTS ingredientsDao (
      ingredient_id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
      ingredient TEXT NOT NULL,
      meal_id INTEGER NOT NULL
    );






  learner_created: true
- name: src/mealplanner/planner/ShoppingList.kt
  visible: true
  learner_created: true
- name: src/mealplanner/file/FileService.kt
  visible: true
  learner_created: true
- name: testFile.txt
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/129/stages/690/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sat, 27 Feb 2021 23:13:10 UTC
record: 6
